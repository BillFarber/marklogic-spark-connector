{
  "url": "",
  "text": "When working with the Java API, you first create a manager for the type of document or operation you want to\nperform on the database (for instance, a JSONDocumentManager to write and read JSON documents or a QueryManager to\nsearch the database). To write or read the content for a database operation, you use standard Java APIs such as\nInputStream, DOM, StAX, JAXB, and Transformer as well as Open Source APIs such as JDOM and Jackson.\n\nThe Java API provides a handle (a kind of adapter) as a uniform interface for content representation. As a result,\nyou can use APIs as different as InputStream and DOM to provide content for one read() or write() method. In\naddition, you can extend the Java API so you can use the existing read() or write() methods with new APIs that\nprovide useful representations for your content.\n\nThis chapter covers a number of basic architecture aspects of the Java API, including fundamental structures such as\ndatabase clients, managers, and handles used in almost every program you will write with it. Before starting to\ncode, you need to understand these structures and the concepts behind them.\n\nThe MarkLogic Java Client API is built on top of the MarkLogic REST API. The REST API, in turn, is built using\nXQuery that is evaluated against an HTTP App Server. For this reason, you need a REST API instance on MarkLogic\nServer to use the Java API. A suitable REST API instance on port 8000 is pre-configured when you install MarkLogic\nServer. You can also create your own on another port. For details, see Choose a REST API Instance.",
  "more-text": "Hello world."
}
